default:
  pre: "{{docker_service}}"

  vars:
    name_prefix: "{{project_name}}"
    watchdog:
      all: yes
  configs:
    runner:
      command: python -m scripts.run
      state: present
      watchdog: { all: no }


    transient_jobs: { celery_worker: { autoscale: "16,3" ,queues: [ 'transient' ] } }
    distributor: { celery_worker: { concurrency: 1 } }
    #    perform_query: { celery_worker: { concurrency: "500", pool: eventlet } }
    perform_query: { celery_worker: { concurrency: 10 } }
    atmospheric_correction: { celery_worker: { concurrency: 3 } }
    process_geometries: { celery_worker: { concurrency: 16 } }
    process_geometry: { celery_worker: { concurrency: 6 } }

    spectral_segmentation: { celery_worker: { concurrency: 8 } }
    classify_crop: { celery_worker: { concurrency: 8 } }
    temporal_difference: { celery_worker: { concurrency: 2 } }
    get_evenly_spaced_points: { celery_worker: { concurrency: 8 } }

    server:
      env:
        FLASK_APP: "app/new_server.py"
        FLASK_RUN_PORT: "5000"
      command: "flask run --host=0.0.0.0 --port=5000"
    flower:
      command: celery --app app flower --hostname imagiflow_flower --conf=app/flowerconfig.py
      ports:
        - "5556:5556"
      env:
        FLOWER_PORT: "5556"
        AMQP_USERNAME: "{{infra.RABBITMQ.user}}"
        AMQP_PASSWORD: "{{infra.RABBITMQ.password}}"
        AMQP_HOST: "{{infra.RABBITMQ.hostname}}"
        AMQP_PORT: "{{infra.RABBITMQ.port}}"
        AMQP_ADMIN_USERNAME: "{{infra.RABBITMQ.user}}"
        AMQP_ADMIN_PASSWORD: "{{infra.RABBITMQ.password}}"
        AMQP_ADMIN_HOST: "{{infra.RABBITMQ.hostname}}"
        AMQP_ADMIN_PORT: "15673"
#        FLOWER_MAX_TASKS: "3000000"
        FLOWER_BASIC_AUTH: "{{infra.RABBITMQ.user}}:{{infra.RABBITMQ.password}}"


production:
  configs:
    scheduler:
      command: celery --app app beat
    perform_query: { celery_worker: { concurrency: 18 } }
    process_geometries: { celery_worker: { concurrency: 16 } }
    process_geometry: { celery_worker: { concurrency: 42 } }
    atmospheric_correction: { celery_worker: { concurrency: 5 } }

    get_evenly_spaced_points: { celery_worker: { concurrency: 4 } }
    classify_crop: { celery_worker: { concurrency: 8 } }
    spectral_segmentation: { celery_worker: { concurrency: 3 } }
    temporal_difference: { celery_worker: { concurrency: 3 } }
    server:
      ports:
        - "16823:5000"
      networks:
        - name: "{{project_name}}_network"
        - name: 'django'
        - name: 'django_da'
        - name: 'postgis'

